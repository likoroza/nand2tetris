CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // X Preset
    Mux16(a=x, b=false, sel=zx, out=zeroedX);  

    Not16(in=zeroedX, out=negatedZeroedX);
    Mux16(a=zeroedX, b=negatedZeroedX, sel=nx, out=presetX);

    // Y Preset
    Mux16(a=y, b=false, sel=zy, out=zeroedY);

    Not16(in=zeroedY, out=negatedZeroedY);
    Mux16(a=zeroedY, b=negatedZeroedY, sel=ny, out=presetY);

    // Function
    And16(a=presetX, b=presetY, out=xAndY);
    Add16(a=presetX, b=presetY, out=xPlusY);
    Mux16(a=xAndY, b=xPlusY, sel=f, out=funcOut);

    // Negation of Output and Outputting Calculation

    Not16(in=funcOut, out=negatedFuncOut);
    Mux16(a=funcOut, b=negatedFuncOut, sel=no, out[0..7]=leastAluOut, out[8..14]=mostAluOut, out[15]=msbOut);
    Or16(a[0..7]=leastAluOut, a[8..14]=mostAluOut, a[15]=msbOut, b=false, out=out);
    
    

    // zr Pin
    Or8Way(in=leastAluOut, out=least8Or);
    Or8Way(in[7]=msbOut, in[0..6]=mostAluOut, out=most8Or);
    Or(a=least8Or, b=most8Or, out=or16Way);
    Not(in=or16Way, out=zr);
    
    // ng Pin
    Or(a=msbOut, b=false, out=ng);
}